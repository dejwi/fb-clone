#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('api:server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

const io = require('socket.io')(server, {
  cors: {
    origin: '*',
  }
});

const passport = require('passport');
const checkAuthSocket = (socket, next) => passport.authenticate('jwt', { session: false })(socket.request, {}, next);
io.use( checkAuthSocket );
const mongoose = require('mongoose');

const Chat = require('../models/chat');

// rec from to message
// send between data
io.on('connection', (socket) => {
  const userId = socket.request.user._id.toString();
  socket.join(userId);

  socket.on('message', data => {
    const messageId = new mongoose.Types.ObjectId();
    const newMessage = { from: data.from, content: data.message, _id: messageId };
    Chat.updateOne({between: {$all: [data.to,data.from]}}, { $push: {messages: newMessage}})
        .then(doc => {
          if(!doc.matchedCount){
            const chat = new Chat({
              between: [data.to, data.from],
              messages: [newMessage],
            });
            chat.save();
          }
        });
    io.to(data.to).to(data.from).emit('message', {between: [data.to,data.from], data: newMessage});
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
